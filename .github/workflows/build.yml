name: Build/release

on:
  label:
    types:
      - created
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install Node.js, NPM
        uses: actions/setup-node@v3
        with:
          node-version: 19.7.0
      
      - name: Install NPM dependencies
        run: npm ci

      - name: Create production .env file
        run: mv .production.env .env
        
      - name: Prisma initial DB / Codegen
        run: npm run db:init

      - name: Build app
        run: npm run build

      - name: Create Artifact archive
        run: tar -cvf dist-${{ matrix.os }}.tar dist

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          retention-days: 5
          path: dist-${{ matrix.os }}.tar
            
      # - name: Build/release Electron app
      #   uses: samuelmeuli/action-electron-builder@v1
      #   with:
      #     # GitHub token, automatically provided to the action
      #     # (No need to define this secret in the repo settings)
      #     github_token: ${{ secrets.github_token }}

      #     # If the commit is tagged with a version (e.g. "v1.0.0"),
      #     # release the app after building
      #     release: ${{ startsWith(github.ref, 'refs/tags/v') }}
  pre-release:
    name: "Pre Release"
    runs-on: "ubuntu-latest"
    needs: build
    permissions: write-all
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2

      - run: ls -la

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            **/*.tar